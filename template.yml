AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: This is a Weather data collector app using S3, DynamoDB, Lambda and API Gateway
Globals:
  Api:
    EndpointConfiguration: REGIONAL

LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - s3.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Description: IAM Role for Lambda to access S3 bucket
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      RoleName: LambdaExecutionRole

  LambdaFunctionSpringFunction:
    DependsOn: LambdaExecutionRole
    Type: AWS::Lambda::Function
    Properties:
      MemorySize: 512
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 15
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "org.example.StreamLambdaHandler::handleRequest"
      Code:
        S3Bucket: weatherdataappbucket
        S3Key: Weather-Data-App-0.0.1-SNAPSHOT-lambda-package.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      FileSystemConfigs: []
      FunctionName: "SpringFunction"
      Runtime: "java21"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: "/aws/lambda/SpringFunction"
      RecursiveLoop: "Terminate"
      EphemeralStorage:
        Size: 512
      Architectures:
        - "x86_64"

    Description: List Amazon S3 buckets in us-east-1

  DynamoDBTableWeatherData:
    Type: "AWS::DynamoDB::Table"
    Properties:
      SSESpecification:
        SSEEnabled: false
      TableName: "WeatherData"
      AttributeDefinitions:
        - AttributeType: "S"
          AttributeName: "id"
      ContributorInsightsSpecification:
        Enabled: false
      BillingMode: "PAY_PER_REQUEST"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      KeySchema:
        - KeyType: "HASH"
          AttributeName: "id"
      DeletionProtectionEnabled: false
      TableClass: "STANDARD"
      Tags: []
      TimeToLiveSpecification:
        Enabled: false

  weatherRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: weatherdataAPI

  ProxyResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref weatherRestAPI
      ParentId: !GetAtt
        - weatherRestAPI
        - RootResourceId
      PathPart: "{proxy+}"

  ProxyResourceANY:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref weatherRestAPI
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${LambdaFunctionSpringFunction.Arn}/invocations"

  Deployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref weatherRestAPI
      Description: My deployment
      StageName: mystage

  LambdaInvokPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunctionSpringFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: 266226424630

  SpringEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(5 minutes)"
      Targets:
        - Id: !Ref LambdaFunctionSpringFunction
          Arn: !GetAtt LambdaFunctionSpringFunction.Arn
      State: "ENABLED"
      Name: "SpringLambdaEvent"

  SpringEventRuleToSpringFunctionConnector:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunctionSpringFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SpringEventRule.Arn

Outputs:
  WeatherDataAppApi:
    Description: URL for application
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ping'
    Export:
      Name: WeatherDataAppApi


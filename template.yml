AWSTemplateFormatVersion: '2010-09-09'
Description: This is a Weather data collector app using S3, DynamoDB, Lambda and API Gateway
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - s3.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: IAM role for lambda to access s3 and dynamodb
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      RoleName: LambdaExecutionRole

  LambdaFunctionSpringFunction:
    DependsOn: LambdaExecutionRole
    Type: AWS::Lambda::Function
    Properties:
      MemorySize: 512
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTableWeatherData
          MY_AWS_REGION: us-east-1
      TracingConfig:
        Mode: PassThrough
      Timeout: 15
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto
      Handler: org.example.StreamLambdaHandler::handleRequest
      Code:
        S3Bucket: aws-weather-app-bucket-am
        S3Key: Weather-Data-App-0.0.1-SNAPSHOT-lambda-package.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: SpringLambdaFunction
      Runtime: java21
      PackageType: Zip
      LoggingConfig:
        LogFormat: Text
        LogGroup: /aws/lambda/SpringLambdaFunction
      EphemeralStorage:
        Size: 512
      Architectures:
        - x86_64

  DynamoDBTableWeatherData:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WeatherData
      AttributeDefinitions:
        - AttributeType: S
          AttributeName: id
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - KeyType: HASH
          AttributeName: id

  weatherRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: weatherDataAPI

  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref weatherRestAPI
      ParentId: !GetAtt weatherRestAPI.RootResourceId
      PathPart: '{proxy+}'

  ProxyResourceANY:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref weatherRestAPI
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${LambdaFunctionSpringFunction.Arn}/invocations

  MyApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: ProxyResourceANY
    Properties:
      RestApiId: !Ref weatherRestAPI
      StageName: 'dev'

  LambdaInvokPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunctionSpringFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: 141138260180

  SpringEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(5 minutes)
      Targets:
        - Id: !Ref LambdaFunctionSpringFunction
          Arn: !GetAtt LambdaFunctionSpringFunction.Arn
      State: ENABLED
      Name: SpringLambdaEvent

  MyLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${weatherRestAPI}'

  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - apigateway.amazonaws.com
          Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  MyApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      StageName: 'dev'
      RestApiId: !Ref weatherRestAPI
      DeploymentId: !Ref MyApiDeployment
      AccessLogSetting:
        DestinationArn: !GetAtt MyLogGroup.Arn